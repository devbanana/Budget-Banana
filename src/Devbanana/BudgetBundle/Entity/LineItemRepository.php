<?php

namespace Devbanana\BudgetBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Devbanana\BudgetBundle\Entity\BudgetCategories;
use Devbanana\BudgetBundle\Entity\Budget;

/**
 * LineItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LineItemRepository extends EntityRepository
{

    public function queryOnOrAfter(\DateTime $date)
    {
        $qb = $this->createQueryBuilder('l');
        $qb
            ->innerJoin('l.transaction', 't')
            ->where($qb->expr()->gte('t.date', ':date'))
            ->setParameter('date', $date)
            ;

        return $qb;
    }

    public function findOnOrAfter(\DateTime $date)
    {
        $qb = $this->queryOnOrAfter($date);

        return $qb->getQuery()->getResult();
    }

    public function filterByBudgeted(QueryBuilder $qb)
    {
        $qb
            ->innerJoin('l.account', 'a')
            ->andWhere($qb->expr()->eq('a.budgeted', true))
            ;

        return $qb;
    }

    public function getBufferedIncome(Budget $budget)
    {
        $qb = $this->createQueryBuilder('l');
        $query = $qb
->innerJoin('l.category', 'bc')
->where($qb->expr()->andX(
            $qb->expr()->eq('bc.budget', ':budget'),
            $qb->expr()->neq('l.assignedMonth', ':budget')
            ))
->setParameter('budget', $budget)
->getQuery()
;

        return $query->getResult();
    }

    public function getIncomeThisMonth(Budget $budget)
    {
        $qb = $this->createQueryBuilder('l');
        $query = $qb
            ->where($qb->expr()->andX(
                        $qb->expr()->eq('l.assignedMonth', ':budget'),
                        $qb->expr()->eq('l.type', ':type')
                        ))
            ->setParameter('budget', $budget)
            ->setParameter(':type', 'income')
            ->select(array('l.inflow'))
            ->getQuery()
            ;

        $results = $query->getResult();

        $income = '0.00';

        foreach ($results as $result)
        {
            $income = bcadd($income, $result['inflow'], 2);
        }

        return $income;
    }

    /**
     * Get the total income assigned to months before this month.
     *
     * This month is taken as the month of the given budget.
     *
     * @param \Devbanana\BudgetBundle\Entity\Budget The budget of the
     * current month
     * @return string The total income before the month of the given budget
     */
    public function getTotalIncomeBefore(Budget $budget)
    {
        $qb = $this->createQueryBuilder('l');
        $query = $qb
            ->innerJoin('l.assignedMonth', 'am')
            ->where($qb->expr()->lt('am.month', ':month'))
            ->setParameter(':month', $budget->getMonth())
            ->getQuery()
            ;

        $result = $query->getResult();

        $income = '0.00';

        foreach ($result as $lineItem)
        {
            $income = bcadd($income, $lineItem->getInflow(), 2);
            // Just in case we have an outflow
            $income = bcsub($income, $lineItem->getOutflow(), 2);
        }

        return $income;
    }

}
