<?php

namespace Devbanana\BudgetBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BudgetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BudgetRepository extends EntityRepository
{

    public function findOneOrCreateByDate(\DateTime $date)
    {
        $month = new \DateTime(sprintf('%04d-%02d-%02d',
                    $date->format('Y'),
                    $date->format('m'),
                    1));

        $budget = $this->findOneByMonth($month);

        if (!$budget) {
            $budget = new Budget;
            $budget->setMonth($month);
            $this->getEntityManager()->persist($budget);
            $this->getEntityManager()->flush();
        }

        return $budget;
    }

    public function findOneOrCreateByMonthAndYear($month, $year)
    {
        $date = new \DateTime(sprintf('%04d-%02d-%02d',
                    $year, $month, 1));
        return $this->findOneOrCreateByDate($date);
    }

    /**
     * Calculates Available to Budget for a given budget entity
     *
     * Available to Budget is the total amount that the user can put towards
     * their budget categories.
     *
     * The formula is:
     * Available to Budget
     *     = Not Budgeted Last Month
     *     - Overspent last month
     *     + Income assigned to this month
     *     - Amount budgeted this month
     * 
     * So as an example, if this month you receive $1,000 income that you
     * assign to this month, you budget $700 of that income, and last month
     * there was $200 you did not budget, but overspent in a few categories
     * totalling $100, the Available to Budget would be:
     *
     *     $200.00 (Not Budgeted Last Month)
     *     - $100.00 (Overspent last month)
     *     + $1,000.00 (Income assigned this month)
     *     - $700.00 (Amount budgeted this month)
     *     = $400.00 (Available to Budget)
     *
     * @param \Devbanana\BudgetBundle\Entity\Budget The budget this month
     *     @return string The amount available to budget
     */
    public function getAvailableToBudget(Budget $budget)
    {

        // 1. Not budgeted last month
        $notBudgetedLastMonth = $this->getNotBudgetedLastMonth($budget);

        // 2. - Overspent last month
        $overspentLastMonth = $this->getOverSpentLastMonth($budget);

        // 3. + Income assigned this month
        $incomeThisMonth = $this->getEntityManager()
            ->getRepository('DevbananaBudgetBundle:LineItem')
            ->getIncomeThisMonth($budget);

        // 4. - Budgeted this month
        $budgetedThisMonth = $this->getEntityManager()
            ->getRepository('DevbananaBudgetBundle:BudgetCategories')
            ->getBudgetedThisMonth($budget);

        // Now calculate using bcmath for accuracy
        $availableToBudget = bcsub($notBudgetedLastMonth,
                $overspentLastMonth,
                2);
        $availableToBudget = bcadd($availableToBudget, $incomeThisMonth, 2);
        $availableToBudget = bcsub($availableToBudget, $budgetedThisMonth, 2);

      return $availableToBudget;
    }

    /**
     * Get the amount not budgeted last month
     *
     * This can really be calculated as all income before this month minus
     * total amount budgeted before this month.
     *
     * @param \Devbanana\BudgetBundle\Entity\Budget The budget this month
     * @return string The amount not budgeted last month
     */
    public function getNotBudgetedLastMonth(Budget $budget)
    {
        // Get all income assigned to months before this month
        $totalIncome = $this->getEntityManager()
            ->getRepository('DevbananaBudgetBundle:LineItem')
            ->getTotalIncomeBefore($budget);

        $totalBudgeted = $this->getEntityManager()
            ->getRepository('DevbananaBudgetBundle:BudgetCategories')
          ->getTotalBudgetedBefore($budget);

            return bcsub($totalIncome, $totalBudgeted, 2);
    }

    public function getOverSpentLastMonth(Budget $budget)
    {
        $month = clone $budget->getMOnth();
        $month->modify('-1 month');
        $previousBudget = $this->findOneByMonth($month);

        if ($previousBudget) {
            $overspent = '0.00';

            foreach ($previousBudget->getCategories() as $category)
            {
                if (bccomp($category->getBalance(), '0.00', 2) < 0) {
                    $overspent = bcsub($overspent, $category->getBalance(), 2);
                }
            }

            return $overspent;
        }

        return '0.00';
    }

}
