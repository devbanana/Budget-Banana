<?php

namespace Devbanana\BudgetBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BudgetCategoriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BudgetCategoriesRepository extends EntityRepository
{

    public function getOutflowForCategory(BudgetCategories $category)
    {
        $qb = $this->createQueryBuilder('bc');
        $query = $qb
            ->innerJoin('bc.lineItems', 'l')
            ->select(array('l.outflow'))
            ->where($qb->expr()->eq('l.category', ':category'))
            ->setParameter('category', $category)
            ->getQuery();

        $outflow = '0.00';

        foreach ($query->getResult() as $lineItem)
        {
            $outflow = bcsub($outflow, $lineItem['outflow'], 2);
        }

   return $outflow;
    }

    public function getBalanceForCategory($category)
    {
if ($category instanceof BudgetCategories) {
    $budgeted = $category->getBudgeted();

$previousCategory = $this->getPreviousMonthCategory($category);
$previousBalance = $this->getBalanceForCategory($previousCategory);

// If carry over is default of budget, then only use balance if positive.
if ($previousBalance < 0 && $previousCategory->getCarryOver() == 'budget') {
$previousBalance = 0;
}

// NOTE: We must use bcadd here because outflow is always negative
return bcadd(bcadd($previousBalance, $budgeted, 2),
        $category->getOutflow(),
        2);
}

return '0.00';
    }

public function getPreviousMonthCategory(BudgetCategories $category)
{
    $date = clone $category->getBudget()->getMonth();
    $date->modify('-1 month');

    $qb = $this->createQueryBuilder('bc');
$query = $qb
    ->innerJoin('bc.budget', 'b')
    ->where($qb->expr()->andX(
                $qb->expr()->eq('bc.category', ':category'),
                $qb->expr()->eq('b.month', ':month')
                ))
    ->setParameter('category', $category->getCategory())
    ->setParameter('month', $date)
    ->getQuery()
    ;

$previousMonth = $query->getResult();

if ($previousMonth) {
    return $previousMonth[0];
}
return null;
}

public function getNextMonthCategory(BudgetCategories $category)
{
    $date = clone $category->getBudget()->getMonth();
    $date->modify('+1 month');

    $qb = $this->createQueryBuilder('bc');
$query = $qb
    ->innerJoin('bc.budget', 'b')
    ->where($qb->expr()->andX(
                $qb->expr()->eq('bc.category', ':category'),
                $qb->expr()->eq('b.month', ':month')
                ))
    ->setParameter('category', $category->getCategory())
    ->setParameter('month', $date)
    ->getQuery()
    ;

$nextMonth = $query->getResult();

if ($nextMonth) {
    return $nextMonth[0];
}
return null;
}

public function getBudgetedThisMonth(Budget $budget)
{
    $qb = $this->createQueryBuilder('bc');
    $query = $qb
        ->where($qb->expr()->eq('bc.budget', ':budget'))
        ->setParameter('budget', $budget)
        ->select(array('bc.budgeted'))
        ->getQuery()
        ;

    $results = $query->getResult();

    $budgeted = '0.00';

    foreach ($results as $result)
    {
        $budgeted = bcadd($budgeted, $result['budgeted'], 2);
    }

    return $budgeted;
}

/**
 * Get the total budgeted before this month.
 *
 * This month is the                 month of the given budget.
 *
 * @param \Devbanana\BudgetBundle\Entity\Budget The current month's budget
 * @return string The total budgeted before the current month
 */
public function getTotalBudgetedBefore(Budget $budget)
{
    $qb = $this->createQueryBuilder('bc');
    $query = $qb
        ->innerJoin('bc.budget', 'b')
        ->where($qb->expr()->lt('b.month', ':month'))
        ->setParameter('month', $budget->getMonth())
        ->getQuery()
        ;

    $result = $query->getResult();

    $budgeted = '0.00';

    foreach ($result as $budgetCategories)
    {
        $budgeted = bcadd($budgeted, $budgetCategories->getBudgeted(), 2);
    }

    return $budgeted;
}

}
